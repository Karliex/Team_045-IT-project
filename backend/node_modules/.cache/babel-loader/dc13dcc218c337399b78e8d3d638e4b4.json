{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar _default = (root, verbose, buffer, // TODO: make mandatory and take Config.ProjectConfig in 27\nconfig = {\n  rootDir: root,\n  testMatch: []\n}, globalConfig) => {\n  const TITLE_INDENT = verbose ? '  ' : '    ';\n  const CONSOLE_INDENT = TITLE_INDENT + '  ';\n  const logEntries = buffer.reduce((output, {\n    type,\n    message,\n    origin\n  }) => {\n    message = message.split(/\\n/).map(line => CONSOLE_INDENT + line).join('\\n');\n    let typeMessage = 'console.' + type;\n    let noStackTrace = true;\n    let noCodeFrame = true;\n\n    if (type === 'warn') {\n      var _globalConfig$noStack;\n\n      message = _chalk().default.yellow(message);\n      typeMessage = _chalk().default.yellow(typeMessage);\n      noStackTrace = (_globalConfig$noStack = globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.noStackTrace) !== null && _globalConfig$noStack !== void 0 ? _globalConfig$noStack : false;\n      noCodeFrame = false;\n    } else if (type === 'error') {\n      var _globalConfig$noStack2;\n\n      message = _chalk().default.red(message);\n      typeMessage = _chalk().default.red(typeMessage);\n      noStackTrace = (_globalConfig$noStack2 = globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.noStackTrace) !== null && _globalConfig$noStack2 !== void 0 ? _globalConfig$noStack2 : false;\n      noCodeFrame = false;\n    }\n\n    const options = {\n      noCodeFrame,\n      noStackTrace\n    };\n    const formattedStackTrace = (0, _jestMessageUtil().formatStackTrace)(origin, config, options);\n    return output + TITLE_INDENT + _chalk().default.dim(typeMessage) + '\\n' + message.trimRight() + '\\n' + _chalk().default.dim(formattedStackTrace.trimRight()) + '\\n\\n';\n  }, '');\n  return logEntries.trimRight() + '\\n';\n};\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/david/Desktop/it_ass/Team_045-IT-project/backend/node_modules/@jest/console/build/getConsoleOutput.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_jestMessageUtil","obj","__esModule","_default","root","verbose","buffer","config","rootDir","testMatch","globalConfig","TITLE_INDENT","CONSOLE_INDENT","logEntries","reduce","output","type","message","origin","split","map","line","join","typeMessage","noStackTrace","noCodeFrame","_globalConfig$noStack","yellow","_globalConfig$noStack2","red","options","formattedStackTrace","formatStackTrace","dim","trimRight"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar _default = (\n  root,\n  verbose,\n  buffer, // TODO: make mandatory and take Config.ProjectConfig in 27\n  config = {\n    rootDir: root,\n    testMatch: []\n  },\n  globalConfig\n) => {\n  const TITLE_INDENT = verbose ? '  ' : '    ';\n  const CONSOLE_INDENT = TITLE_INDENT + '  ';\n  const logEntries = buffer.reduce((output, {type, message, origin}) => {\n    message = message\n      .split(/\\n/)\n      .map(line => CONSOLE_INDENT + line)\n      .join('\\n');\n    let typeMessage = 'console.' + type;\n    let noStackTrace = true;\n    let noCodeFrame = true;\n\n    if (type === 'warn') {\n      var _globalConfig$noStack;\n\n      message = _chalk().default.yellow(message);\n      typeMessage = _chalk().default.yellow(typeMessage);\n      noStackTrace =\n        (_globalConfig$noStack =\n          globalConfig === null || globalConfig === void 0\n            ? void 0\n            : globalConfig.noStackTrace) !== null &&\n        _globalConfig$noStack !== void 0\n          ? _globalConfig$noStack\n          : false;\n      noCodeFrame = false;\n    } else if (type === 'error') {\n      var _globalConfig$noStack2;\n\n      message = _chalk().default.red(message);\n      typeMessage = _chalk().default.red(typeMessage);\n      noStackTrace =\n        (_globalConfig$noStack2 =\n          globalConfig === null || globalConfig === void 0\n            ? void 0\n            : globalConfig.noStackTrace) !== null &&\n        _globalConfig$noStack2 !== void 0\n          ? _globalConfig$noStack2\n          : false;\n      noCodeFrame = false;\n    }\n\n    const options = {\n      noCodeFrame,\n      noStackTrace\n    };\n    const formattedStackTrace = (0, _jestMessageUtil().formatStackTrace)(\n      origin,\n      config,\n      options\n    );\n    return (\n      output +\n      TITLE_INDENT +\n      _chalk().default.dim(typeMessage) +\n      '\\n' +\n      message.trimRight() +\n      '\\n' +\n      _chalk().default.dim(formattedStackTrace.trimRight()) +\n      '\\n\\n'\n    );\n  }, '');\n  return logEntries.trimRight() + '\\n';\n};\n\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}